<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="135.49896mm"
   height="108.1913mm"
   viewBox="0 0 135.49896 108.1913"
   version="1.1"
   id="svg1"
   xml:space="preserve"
   inkscape:version="1.3 (0e150ed6c4, 2023-07-21)"
   sodipodi:docname="automatic-save-0-2024_04_09_01_48_40-14080-1.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg"><sodipodi:namedview
     id="namedview1"
     pagecolor="#ffffff"
     bordercolor="#000000"
     borderopacity="0.25"
     inkscape:showpageshadow="2"
     inkscape:pageopacity="0.0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#d1d1d1"
     inkscape:document-units="mm"
     inkscape:zoom="1"
     inkscape:cx="151"
     inkscape:cy="330.5"
     inkscape:window-width="1920"
     inkscape:window-height="1009"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1" /><defs
     id="defs1" /><g
     inkscape:label="Camada 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-22.4297,46.223385)"><g
       id="g313"
       transform="translate(-30.633921,-200.36402)"><path
         style="fill:#007ef7;fill-opacity:1"
         d="m 65.180434,262.19938 c -6.332138,-1.1025 -10.989753,-7.87819 -11.728917,-17.06269 -0.32005,-3.97679 -0.277334,-13.93797 0.08112,-18.91771 0.348301,-4.83865 1.586051,-10.91384 3.551082,-17.4296 2.267745,-7.51951 3.782925,-10.39983 7.28848,-13.85521 4.212656,-4.15235 9.284317,-6.43559 14.967686,-6.73838 l 2.839266,-0.15127 0.160484,-0.95496 c 0.77737,-4.62573 3.384943,-14.19281 4.911635,-18.02058 2.922911,-7.32841 9.362706,-12.73111 17.22088,-14.44754 2.49506,-0.54498 7.17393,-0.54601 9.66347,-0.002 4.41,0.96345 8.63705,3.21997 11.76461,6.28029 l 1.58896,1.5548 h 7.45879 7.45879 l 1.04588,-1.08385 c 3.75974,-3.89621 9.08718,-6.46738 14.69628,-7.09283 10.17007,-1.13403 20.33123,4.8603 24.26771,14.31615 2.51261,6.03556 5.22662,17.36993 5.68896,23.75845 0.38031,5.25505 0.3838,15.65053 0.007,19.59992 -0.51006,5.34007 -2.40205,9.87341 -5.4218,12.99097 -3.12295,3.22411 -7.80466,4.28993 -12.39497,2.82178 -2.63098,-0.84149 -6.76045,-3.44241 -9.63138,-6.06628 -1.50507,-1.37555 -1.54375,-1.39315 -1.38483,-0.63021 1.92463,9.23942 1.92759,21.92231 0.007,28.6984 -2.88729,10.1851 -9.43427,14.49855 -17.68158,11.64944 -5.68515,-1.96398 -12.27373,-7.86306 -17.96084,-16.08122 l -1.87673,-2.71197 -15.09244,0.006 -15.092432,0.006 -1.36351,2.07009 c -3.17381,4.8185 -8.436453,10.55653 -12.281366,13.39078 -4.249864,3.13276 -9.195161,4.72353 -12.75656,4.10345 z"
         id="path317" /><path
         style="fill:#65b5ff;fill-opacity:1"
         d="m 64.738649,261.92998 c -6.215049,-1.30632 -10.441075,-8.09552 -11.359022,-18.2485 -1.080438,-11.95023 0.630817,-25.3664 4.809097,-37.70312 1.842088,-5.43893 3.376859,-8.03998 6.581429,-11.15388 4.009971,-3.89651 9.191316,-6.15463 15.120748,-6.58987 l 2.520608,-0.18503 0.296641,-1.75124 c 0.899016,-5.30739 3.97931,-15.94285 5.472572,-18.89537 3.128483,-6.18571 8.577703,-10.55564 15.457368,-12.3958 3.15279,-0.8433 8.16344,-0.83709 11.35927,0.0141 4.24249,1.12994 7.97438,3.23655 10.87877,6.14095 l 1.55678,1.55678 h 7.44231 7.4423 l 1.78666,-1.68543 c 2.27974,-2.1506 3.72893,-3.14079 6.49113,-4.4352 5.64743,-2.64648 11.46252,-2.97723 17.45114,-0.99261 3.33839,1.10634 5.9445,2.66802 8.53955,5.11723 3.63528,3.43096 5.04671,5.86186 7.15019,12.31476 4.12501,12.6544 5.62265,25.27149 4.42822,37.30625 -0.45668,4.60141 -1.08383,6.98743 -2.69889,10.26799 -2.05336,4.17086 -5.03311,6.6586 -8.93432,7.45911 -4.5046,0.92432 -10.45494,-1.60668 -16.0956,-6.84634 -0.69346,-0.64417 -1.30448,-1.12344 -1.35781,-1.06505 -0.0533,0.0584 0.11556,1.41585 0.37532,3.01658 1.19936,7.39089 1.37311,17.72605 0.38922,23.15104 -1.67561,9.239 -5.74737,14.63327 -11.83241,15.6756 -3.33617,0.57146 -7.64661,-0.79847 -12.04654,-3.82858 -3.73823,-2.57442 -9.12909,-8.3939 -12.87665,-13.90048 l -1.30347,-1.91529 H 106.76217 91.741091 l -0.629897,0.8599 c -4.181294,5.70804 -5.815564,7.69917 -8.645887,10.53385 -3.872384,3.87833 -7.102138,6.14568 -10.511641,7.37939 -2.489506,0.9008 -5.265802,1.20798 -7.215017,0.79828 z m 14.405402,-13.81251 c 1.933537,-2.10249 5.466182,-6.72009 7.28632,-9.52411 0.723677,-1.11486 1.472759,-1.93115 2.003093,-2.18281 0.731263,-0.34701 3.240921,-0.40199 18.348926,-0.40199 15.25881,0 17.60301,0.0523 18.29152,0.40838 0.45505,0.23532 1.30673,1.21643 2.0097,2.31511 1.83101,2.86171 4.50684,6.37775 6.93807,9.11662 2.48897,2.80391 2.86126,2.93262 4.84461,1.67482 3.81743,-2.42095 6.72821,-6.75283 8.81208,-13.11432 1.93083,-5.89432 3.17996,-14.68367 2.97109,-20.90581 -0.10885,-3.24232 -0.1869,-3.6537 -1.36097,-7.17296 -1.47394,-4.41808 -2.62758,-6.49697 -4.81673,-8.67988 -7.20032,-7.17978 -18.88781,-6.60274 -25.4285,1.25549 -0.61249,0.73586 -1.38639,1.48934 -1.71979,1.67441 -0.4601,0.25539 -3.05308,0.33874 -10.75944,0.34585 l -10.153258,0.009 -2.563302,-2.61581 c -2.256089,-2.30231 -2.862567,-2.75967 -5.060284,-3.81612 -2.930689,-1.40879 -4.835299,-1.8482 -7.928167,-1.82911 -4.631958,0.0286 -8.452777,1.6332 -11.781729,4.94789 -2.528547,2.5177 -3.525133,4.30021 -5.180711,9.26627 l -1.146683,3.43959 0.02907,4.49791 c 0.07541,11.66909 2.969455,22.8023 7.46236,28.70729 2.052708,2.69786 5.688044,5.28063 6.683099,4.74809 0.248414,-0.13295 1.247246,-1.10683 2.219627,-2.16418 z m 0.39455,-18.12818 c -0.891199,-0.80369 -1.215295,-2.03759 -1.494147,-5.68854 l -0.156615,-2.05052 h -2.988413 c -2.820388,0 -3.033677,-0.0381 -3.793466,-0.67741 -0.534865,-0.45006 -0.854129,-1.00505 -0.95128,-1.65364 -0.08042,-0.53693 -0.270494,-1.52784 -0.422377,-2.20201 -0.332931,-1.47781 0.09016,-2.73926 1.215687,-3.6246 0.654968,-0.5152 1.048788,-0.57359 3.86852,-0.57359 h 3.139319 v -2.78662 c 0,-3.10617 0.314238,-4.20612 1.458827,-5.10646 1.317542,-1.03637 3.688634,-0.60443 4.645563,0.8463 0.244264,0.37031 0.418814,1.65668 0.507418,3.73949 l 0.135066,3.175 3.175,0.13229 c 2.182651,0.0909 3.36109,0.25557 3.77039,0.52671 0.914787,0.60601 1.480279,2.01747 1.260494,3.14618 -0.102526,0.52653 -0.271214,1.4931 -0.374863,2.14794 -0.225005,1.42157 -0.635879,2.23978 -1.275233,2.5395 -0.258704,0.12128 -1.83959,0.28412 -3.513079,0.36186 l -3.042709,0.14135 -0.06356,1.45521 c -0.07369,1.68723 -0.523759,4.30284 -0.924063,5.37029 -0.585613,1.56158 -2.842962,1.98385 -4.176482,0.78127 z m 50.834029,0.0502 c -0.53487,-0.45006 -0.85413,-1.00505 -0.95128,-1.65365 -0.0804,-0.53693 -0.2705,-1.52783 -0.42238,-2.202 -0.50305,-2.23291 0.89799,-4.19819 2.99286,-4.19819 2.10176,0 3.62917,1.72611 3.25009,3.67289 -0.10253,0.52652 -0.2772,1.4931 -0.38816,2.14794 -0.28414,1.67682 -0.50188,2.08249 -1.35436,2.52333 -1.12043,0.5794 -2.21382,0.47788 -3.12677,-0.29032 z m -28.13796,-2.11802 c -1.40325,-0.7614 -1.92872,-2.79951 -1.12332,-4.35698 0.69955,-1.3528 1.52751,-1.57884 5.78291,-1.57884 3.71177,0 3.85374,0.0206 4.62569,0.67011 0.43801,0.36857 0.93263,1.08294 1.09915,1.5875 0.39728,1.20377 -0.025,2.51838 -1.09915,3.42227 -0.77455,0.65174 -0.90288,0.66983 -4.67869,0.65952 -2.91629,-0.008 -4.06253,-0.10838 -4.60659,-0.40358 z m 19.67129,-6.34865 c -0.53487,-0.45006 -0.85413,-1.00505 -0.95128,-1.65364 -0.0804,-0.53693 -0.27049,-1.52784 -0.42238,-2.20201 -0.50304,-2.2329 0.898,-4.19819 2.99287,-4.19819 2.10175,0 3.62916,1.72611 3.25008,3.67289 -0.10252,0.52653 -0.27719,1.4931 -0.38816,2.14794 -0.28413,1.67682 -0.50187,2.0825 -1.35435,2.52333 -1.12044,0.5794 -2.21383,0.47788 -3.12678,-0.29032 z m 16.93333,0 c -0.53486,-0.45006 -0.85413,-1.00505 -0.95128,-1.65364 -0.0804,-0.53693 -0.27049,-1.52784 -0.42237,-2.20201 -0.50305,-2.2329 0.89799,-4.19819 2.99286,-4.19819 2.10175,0 3.62917,1.72611 3.25009,3.67289 -0.10253,0.52653 -0.2772,1.4931 -0.38817,2.14794 -0.28413,1.67682 -0.50187,2.0825 -1.35435,2.52333 -1.12044,0.5794 -2.21382,0.47788 -3.12678,-0.29032 z m -8.46666,-8.46666 c -0.53487,-0.45006 -0.85413,-1.00505 -0.95128,-1.65365 -0.0804,-0.53693 -0.2705,-1.52783 -0.42238,-2.20201 -0.50305,-2.2329 0.89799,-4.19819 2.99286,-4.19819 2.10176,0 3.62917,1.72612 3.25009,3.67289 -0.10253,0.52653 -0.2772,1.4931 -0.38816,2.14795 -0.28414,1.67682 -0.50188,2.08249 -1.35436,2.52332 -1.12043,0.57941 -2.21382,0.47789 -3.12677,-0.29031 z"
         id="path316" /><path
         style="fill:#6e6e6e"
         d="m 64.792427,261.67458 c -1.400501,-0.29701 -3.530584,-1.35312 -4.74031,-2.35028 -3.148775,-2.59548 -5.540615,-8.02156 -6.487232,-14.71678 -0.432747,-3.06073 -0.433051,-12.88684 -5.17e-4,-16.66875 1.081063,-9.45237 4.29083,-21.95981 6.965753,-27.14332 2.05468,-3.9816 5.594445,-7.4744 9.737485,-9.6083 3.035763,-1.56359 5.518271,-2.27489 9.216886,-2.64087 l 3.084097,-0.30517 0.188482,-0.92096 c 1.501868,-7.33841 3.105044,-13.28817 4.739585,-17.58971 2.165814,-5.69966 6.556945,-10.46447 11.932816,-12.94828 8.716368,-4.02721 18.830238,-2.39811 25.769778,4.15089 l 2.17281,2.05052 h 7.57105 7.57105 l 1.55678,-1.55678 c 5.02533,-5.02534 12.49951,-7.59573 19.3453,-6.65291 7.81667,1.07653 14.54823,5.79854 17.92703,12.57531 2.48572,4.98555 5.74162,17.89045 6.70879,26.59062 0.44362,3.99049 0.45715,13.18388 0.0244,16.57619 -1.26045,9.8807 -5.35207,16.00755 -11.54527,17.28805 -4.38537,0.90671 -9.52804,-1.20604 -15.44625,-6.34573 -1.20945,-1.05036 -2.25366,-1.85508 -2.32047,-1.78827 -0.0668,0.0668 0.11443,1.59741 0.40274,3.40134 0.87732,5.48926 1.14986,9.66682 1.00356,15.38279 -0.15432,6.02974 -0.59566,9.04471 -1.89452,12.94228 -1.99543,5.98779 -5.51426,9.52786 -10.28255,10.34464 -3.4383,0.58895 -8.22316,-1.00971 -12.35872,-4.12916 -3.84415,-2.89965 -8.44662,-7.90223 -12.08603,-13.13671 l -1.56364,-2.24896 -15.25836,-0.0683 -15.258361,-0.0683 -1.298492,1.92037 c -4.933682,7.29655 -11.012478,13.35983 -15.835665,15.79522 -3.486346,1.76038 -6.901174,2.42935 -9.542015,1.8693 z m 5.420514,-6.40636 c 4.425426,-1.62737 10.265458,-7.26459 15.350179,-14.8171 1.618307,-2.40373 2.508885,-3.47891 3.122979,-3.77032 0.746188,-0.35408 3.106168,-0.40765 17.959361,-0.40765 14.1204,0 17.25594,0.065 17.99357,0.37323 0.65798,0.27493 1.32751,1.02413 2.54178,2.84427 6.23468,9.34551 12.8709,15.4179 17.86242,16.34481 2.24431,0.41675 3.66257,-0.084 5.26682,-1.85976 4.09943,-4.53758 5.25253,-16.69917 2.90438,-30.63203 -1.39697,-8.28897 -4.03026,-17.52802 -5.89508,-20.6832 -2.04375,-3.45792 -5.65483,-6.27006 -9.69998,-7.55389 -4.39221,-1.39397 -8.78887,-1.05934 -13.09687,0.99679 -1.88855,0.90137 -2.63717,1.4676 -4.67138,3.53328 -1.33233,1.35294 -2.66395,2.58916 -2.95917,2.74715 -0.35808,0.19165 -3.76554,0.28726 -10.23676,0.28726 -10.903688,0 -10.381337,0.0883 -12.030612,-2.0329 -3.189605,-4.10221 -9.288649,-6.73443 -14.716614,-6.35137 -2.451873,0.17303 -5.573016,1.1232 -7.772968,2.36634 -2.15637,1.2185 -5.258791,4.45897 -6.394852,6.67939 -2.350866,4.59476 -5.28454,16.23394 -6.335422,25.13542 -0.443654,3.75796 -0.450589,12.86016 -0.01189,15.61041 0.490081,3.0724 1.259212,5.75849 2.159621,7.54219 2.118642,4.197 4.471632,5.18805 8.660491,3.64768 z m 9.565352,-27.59394 c -0.961416,-0.52252 -1.227489,-1.40905 -1.427679,-4.7569 -0.09553,-1.59759 -0.230465,-2.99658 -0.299854,-3.10885 -0.06939,-0.11227 -1.434734,-0.20413 -3.034102,-0.20413 -3.214996,0 -4.155001,-0.29067 -4.682235,-1.44782 -0.554081,-1.21607 -0.390489,-2.42925 0.455326,-3.37665 l 0.771419,-0.86407 3.262476,-0.0898 c 2.096333,-0.0577 3.332315,-0.19955 3.457862,-0.39687 0.107463,-0.1689 0.19721,-1.6374 0.199438,-3.26335 0.0038,-2.78295 0.04377,-3.00346 0.681459,-3.76131 1.216754,-1.44603 3.48698,-1.34797 4.535096,0.1959 0.368981,0.5435 0.505527,1.41364 0.608211,3.87584 l 0.13241,3.175 3.175,0.13229 c 1.755185,0.0731 3.425792,0.2761 3.735824,0.45388 0.308453,0.17687 0.768652,0.75954 1.022664,1.29483 0.385827,0.81307 0.412229,1.13884 0.160411,1.97933 -0.527171,1.75954 -1.249489,2.0928 -4.536066,2.0928 -1.569202,0 -3.041427,0.0723 -3.27161,0.1606 -0.344597,0.13223 -0.418515,0.64776 -0.418515,2.91891 0,3.01355 -0.335765,4.24261 -1.353839,4.9557 -0.750986,0.52601 -2.239728,0.54228 -3.173696,0.0347 z m 22.720967,-0.007 c -0.79654,-0.44355 -1.52468,-1.64061 -1.52468,-2.50656 0,-0.91006 0.74744,-2.07914 1.61668,-2.52863 0.65746,-0.33999 1.52574,-0.40444 4.5158,-0.33521 l 3.70183,0.0857 0.77139,0.86407 c 1.06678,1.19497 1.06678,2.63315 -1e-5,3.82811 l -0.77138,0.86407 -3.79268,0.0659 c -2.99807,0.0521 -3.94442,-0.0186 -4.51695,-0.33744 z m 28.13777,0.0346 c -1.46262,-0.81068 -1.80437,-3.02135 -0.67463,-4.36398 1.36565,-1.62298 3.81743,-1.28846 4.73544,0.64611 1.21061,2.55117 -1.571,5.09786 -4.06081,3.71787 z m -8.46666,-8.46667 c -1.46263,-0.81067 -1.80438,-3.02135 -0.67463,-4.36398 1.36564,-1.62298 3.81742,-1.28845 4.73543,0.64612 1.21061,2.55116 -1.57099,5.09785 -4.0608,3.71786 z m 16.93333,0 c -1.46262,-0.81067 -1.80438,-3.02135 -0.67463,-4.36398 1.36565,-1.62298 3.81742,-1.28845 4.73544,0.64612 1.2106,2.55116 -1.571,5.09785 -4.06081,3.71786 z m -8.46667,-8.46667 c -1.46262,-0.81067 -1.80437,-3.02135 -0.67463,-4.36397 1.36565,-1.62298 3.81743,-1.28846 4.73544,0.64611 1.21061,2.55117 -1.571,5.09786 -4.06081,3.71786 z m 46.66984,10.21375 c 4.6202,-3.21741 6.33312,-15.39714 4.21248,-29.95285 -0.5928,-4.0689 -2.64359,-13.15086 -3.73063,-16.52117 -1.68579,-5.22671 -3.45833,-8.04627 -6.51271,-10.35969 -3.19978,-2.42356 -6.71836,-3.59951 -10.77018,-3.59951 -5.30609,0 -9.24506,1.81504 -13.25142,6.10613 l -2.00662,2.14924 h -10.24875 -10.24875 l -2.59159,-2.61525 c -2.15288,-2.17255 -2.96716,-2.79914 -4.81025,-3.70154 -2.99612,-1.46693 -4.86397,-1.91218 -8.0395,-1.9164 -4.86471,-0.006 -8.94915,1.66495 -12.299566,5.0332 -2.330773,2.34317 -3.452791,4.33302 -4.862793,8.62395 -0.948963,2.88789 -2.983709,11.57108 -3.263841,13.92831 -0.133484,1.12323 -0.09218,1.24443 0.482824,1.41664 1.535852,0.46 5.753858,3.27389 7.808228,5.20898 l 2.213774,2.08524 7.392074,-0.0938 7.39207,-0.0938 1.83664,-1.73259 c 2.33663,-2.20427 3.7852,-3.19551 6.48391,-4.43689 3.79649,-1.74634 5.05382,-1.99628 9.96772,-1.98143 4.06023,0.0123 4.52296,0.0654 6.61459,0.75869 6.96882,2.31007 12.1373,6.89333 14.70263,13.03787 1.35014,3.23389 6.17533,9.84961 9.54112,13.08163 3.27651,3.14628 7.15828,5.70694 9.55786,6.30496 1.53096,0.38155 3.23855,0.10022 4.43068,-0.72995 z m -69.12073,-26.78552 c -0.93994,-0.37789 -1.65295,-1.79842 -1.65621,-3.29966 -0.002,-0.72761 -0.0788,-2.12659 -0.17154,-3.10886 l -0.16867,-1.78593 -2.9383,-0.004 c -3.345918,-0.004 -4.039947,-0.23694 -4.738092,-1.58728 -0.686527,-1.32786 -0.447989,-2.83285 0.597004,-3.76663 0.785162,-0.7016 0.920488,-0.72775 3.786648,-0.73165 1.63481,-0.002 3.11058,-0.092 3.27947,-0.19944 0.19732,-0.12555 0.33918,-1.36153 0.39688,-3.45786 l 0.0898,-3.26248 0.86407,-0.77142 c 1.41562,-1.26383 3.72906,-0.93676 4.63386,0.65511 0.17439,0.30682 0.37791,1.9866 0.45228,3.73285 l 0.1352,3.175 3.14641,0.0749 c 3.5917,0.0855 4.38792,0.41931 4.93201,2.06792 0.25798,0.7817 0.23464,1.144 -0.13628,2.11524 -0.24617,0.64459 -0.7051,1.31944 -1.01986,1.49968 -0.32283,0.18487 -1.9562,0.38538 -3.74727,0.46001 l -3.17501,0.13229 -0.14358,3.175 c -0.079,1.74625 -0.29086,3.44165 -0.47086,3.76757 -0.64294,1.1641 -2.51603,1.69528 -3.94795,1.11959 z m 50.73219,-0.0661 c -0.96765,-0.4835 -1.64252,-1.95262 -1.4854,-3.23356 0.37508,-3.05804 4.7571,-3.44293 5.72735,-0.50305 0.25808,0.782 0.23461,1.14407 -0.13728,2.11785 -0.66926,1.75245 -2.43975,2.45067 -4.10467,1.61876 z m -8.46667,-8.46666 c -0.96765,-0.48351 -1.64251,-1.95262 -1.4854,-3.23357 0.37508,-3.05804 4.75711,-3.44292 5.72735,-0.50305 0.25809,0.782 0.23462,1.14407 -0.13727,2.11785 -0.66927,1.75245 -2.43975,2.45068 -4.10468,1.61877 z m 16.93333,0 c -0.96764,-0.48351 -1.64251,-1.95262 -1.4854,-3.23357 0.37509,-3.05804 4.75711,-3.44292 5.72736,-0.50305 0.25808,0.782 0.23461,1.14407 -0.13728,2.11785 -0.66927,1.75245 -2.43975,2.45068 -4.10468,1.61877 z m -8.46666,-8.46667 c -0.96765,-0.4835 -1.64252,-1.95262 -1.4854,-3.23357 0.37508,-3.05804 4.7571,-3.44292 5.72735,-0.50304 0.25808,0.78199 0.23461,1.14407 -0.13728,2.11785 -0.66926,1.75244 -2.43975,2.45067 -4.10467,1.61876 z"
         id="path315" /><path
         style="fill:#282828"
         d="m 63.478847,260.89272 c -2.943237,-1.05938 -5.173039,-3.30775 -6.964556,-7.02256 -1.119363,-2.32107 -2.232175,-6.24802 -2.520262,-8.89365 -0.101329,-0.93055 -0.305841,-1.84493 -0.454472,-2.03195 -0.36009,-0.45311 -0.356249,-12.36455 0.0041,-12.81929 0.145763,-0.18393 0.34734,-1.28692 0.447948,-2.45108 0.631659,-7.30911 4.160029,-21.39015 6.563523,-26.19375 3.740151,-7.47503 11.792124,-12.56771 19.870657,-12.56771 1.319126,0 2.059766,-0.11643 2.257701,-0.35493 0.162013,-0.19521 0.482377,-1.35607 0.711922,-2.57969 1.044025,-5.5653 3.600437,-14.44481 5.145198,-17.87147 2.588979,-5.74299 7.48021,-9.98453 14.021434,-12.159 2.1145,-0.70291 2.51789,-0.7476 6.74688,-0.7476 4.22899,0 4.63238,0.0447 6.74688,0.7476 4.03372,1.34091 6.17482,2.63341 9.21637,5.56355 l 1.94033,1.86925 h 7.76726 7.76725 l 0.93211,-1.08896 c 2.22781,-2.60269 7.06721,-5.53134 10.87355,-6.5803 2.19463,-0.6048 7.64083,-0.82542 10.01865,-0.40584 7.10088,1.25299 13.28548,5.86366 16.51014,12.30843 2.29376,4.5843 5.61405,17.54452 6.40556,25.00313 0.16215,1.52797 0.41793,3.16989 0.56841,3.64871 0.33421,1.06344 0.34385,12.16227 0.0109,12.58692 -0.12971,0.16546 -0.3118,1.06321 -0.40464,1.99502 -0.23715,2.38021 -1.34311,6.58944 -2.26633,8.62556 -2.38136,5.25198 -5.71534,7.82906 -10.38065,8.02396 -1.60909,0.0672 -2.74756,-0.0367 -3.82065,-0.34861 -3.35649,-0.97576 -7.149,-3.35511 -10.81716,-6.78649 -1.09996,-1.02896 -1.83938,-1.54101 -1.99727,-1.38311 -0.1579,0.1579 -0.11275,0.98127 0.12196,2.22406 1.66656,8.82447 1.88097,19.46905 0.52472,26.05043 -1.39222,6.75592 -4.32528,11.49843 -8.2132,13.28006 -1.83978,0.84307 -4.96082,1.11133 -7.29412,0.62694 -5.79651,-1.20335 -12.78181,-7.17346 -19.53093,-16.69245 l -1.87074,-2.6385 H 106.70924 91.301101 l -1.954346,2.79404 c -6.17239,8.82441 -12.803062,14.60094 -18.781135,16.36182 -1.975168,0.5818 -5.335183,0.53792 -7.086773,-0.0925 z m 7.60817,-5.51138 c 4.706342,-2.24613 10.131617,-7.70497 15.170024,-15.26387 0.967089,-1.45088 2.025022,-2.78611 2.350961,-2.96719 0.762888,-0.42381 35.398408,-0.50118 36.183848,-0.0808 0.27453,0.14692 1.3085,1.48566 2.29771,2.97496 4.92411,7.4135 10.17177,12.7333 15.0276,15.23418 1.66956,0.85987 2.06273,0.95476 3.98711,0.96227 1.9026,0.007 2.25684,-0.0723 3.25547,-0.73251 2.20577,-1.4583 4.01176,-5.28661 4.97734,-10.5509 0.56575,-3.08444 0.63227,-12.22872 0.11996,-16.48951 -1.04522,-8.69276 -3.81679,-19.82459 -6.12639,-24.60625 -4.37063,-9.04866 -15.33126,-12.57513 -24.46529,-7.87144 -1.35057,0.69549 -2.52908,1.63449 -4.32508,3.4461 -1.52931,1.54258 -2.78712,2.58144 -3.30555,2.73012 -0.9398,0.26953 -17.63836,0.33322 -18.943201,0.0723 -0.486532,-0.0973 -1.194871,-0.56817 -1.686718,-1.12124 -3.056724,-3.43717 -5.09793,-4.92474 -8.492391,-6.18902 -2.810782,-1.04687 -6.963912,-1.29414 -10.082633,-0.60029 -4.804574,1.06891 -9.490354,4.67612 -11.696698,9.00434 -2.522445,4.94833 -5.414216,16.50997 -6.452256,25.79688 -0.41508,3.71354 -0.409961,11.43944 0.0096,14.55208 0.850539,6.30935 2.975498,10.68957 5.968481,12.30296 1.273131,0.6863 4.099943,0.41256 6.228062,-0.6031 z m 9.382353,-27.82499 c -1.346591,-0.55114 -1.579709,-1.19329 -1.719791,-4.73732 l -0.132292,-3.34692 -3.368048,-0.1323 c -3.24047,-0.12728 -3.395584,-0.15985 -4.095028,-0.85989 -1.006435,-1.0073 -1.014108,-2.55715 -0.01759,-3.55366 0.675695,-0.6757 0.870198,-0.71654 4.095028,-0.8599 l 3.38564,-0.1505 0.132292,-3.35282 c 0.121928,-3.09017 0.182538,-3.40624 0.773724,-4.03489 0.467739,-0.49738 0.909672,-0.68209 1.632007,-0.68209 2.197674,0 2.621352,0.74274 2.621352,4.59543 0,1.5233 0.07227,2.95796 0.160599,3.18814 0.131785,0.34343 0.642101,0.41878 2.844271,0.41999 3.538799,0.002 4.566063,0.29588 5.124137,1.46617 0.332886,0.69807 0.375906,1.13651 0.186678,1.90255 -0.377983,1.53016 -1.403475,1.92055 -5.046232,1.92106 -2.444094,3.4e-4 -2.975718,0.072 -3.108854,0.41893 -0.08833,0.23018 -0.160599,1.72629 -0.160599,3.32468 0,1.5984 -0.128646,3.14655 -0.28588,3.44035 -0.157234,0.29379 -0.689191,0.70268 -1.182127,0.90864 -1.007639,0.42102 -1.09931,0.42722 -1.839285,0.12435 z m 22.69988,-0.0275 c -1.09478,-0.33635 -1.66551,-1.17218 -1.66551,-2.43912 0,-2.11675 1.60238,-2.74689 6.3978,-2.51598 2.41736,0.11641 2.69884,0.18616 3.34051,0.82783 0.98242,0.98242 0.97594,2.54215 -0.0147,3.53276 -0.69028,0.69027 -0.82935,0.71783 -3.96274,0.78522 -1.78605,0.0384 -3.62898,-0.0474 -4.0954,-0.19071 z m 28.10012,0.0332 c -1.62236,-0.68148 -2.11909,-2.85126 -0.94005,-4.10628 0.6781,-0.7218 2.22505,-0.92768 3.17011,-0.4219 1.21666,0.65113 1.35192,3.35358 0.20497,4.09524 -0.80408,0.51995 -1.80447,0.69781 -2.43503,0.43294 z m -8.46667,-8.46666 c -1.62235,-0.68149 -2.11908,-2.85126 -0.94005,-4.10629 0.6781,-0.7218 2.22505,-0.92768 3.17012,-0.4219 1.21665,0.65114 1.35191,3.35358 0.20496,4.09524 -0.80408,0.51995 -1.80447,0.69782 -2.43503,0.43295 z m 16.93334,0 c -1.62236,-0.68149 -2.11909,-2.85126 -0.94006,-4.10629 0.6781,-0.7218 2.22506,-0.92768 3.17012,-0.4219 1.21666,0.65114 1.35191,3.35358 0.20497,4.09524 -0.80409,0.51995 -1.80448,0.69782 -2.43503,0.43295 z m -8.46667,-8.46667 c -1.62236,-0.68149 -2.11909,-2.85126 -0.94005,-4.10628 0.6781,-0.72181 2.22505,-0.92769 3.17011,-0.4219 1.21666,0.65113 1.35192,3.35358 0.20497,4.09523 -0.80408,0.51995 -1.80447,0.69782 -2.43503,0.43295 z m 46.23731,10.93449 c 2.2257,-1.55636 4.11419,-5.49403 5,-10.42548 0.47657,-2.65315 0.47705,-14.30853 7.3e-4,-17.72708 -1.24578,-8.94096 -4.1029,-19.85723 -6.31349,-24.12207 -1.8721,-3.61181 -5.44846,-6.65948 -9.60268,-8.18313 -2.94515,-1.0802 -6.8162,-1.33488 -9.8912,-0.65076 -3.7461,0.83343 -7.45544,3.1075 -9.88412,6.05961 -0.6172,0.75023 -1.45064,1.50752 -1.85208,1.68285 -0.92377,0.40348 -18.73181,0.47656 -19.77185,0.0811 -0.37832,-0.14384 -1.78506,-1.37119 -3.12607,-2.72744 -2.01141,-2.03426 -2.8319,-2.65849 -4.68717,-3.566 -2.82598,-1.38232 -5.03665,-1.90388 -8.0698,-1.90388 -3.00916,0 -5.22379,0.51933 -8.05988,1.89002 -1.815943,0.87765 -2.666781,1.51303 -4.502663,3.36246 -2.577235,2.59625 -3.461632,4.10364 -4.865735,8.2933 -1.640658,4.89549 -4.077945,15.26573 -3.722885,15.84023 0.08065,0.1305 1.009881,0.63611 2.064952,1.12358 2.781244,1.28502 4.645037,2.54996 6.866934,4.66055 l 1.962,1.8637 h 7.693757 7.69376 l 1.13905,-1.2168 c 2.64354,-2.824 7.10845,-5.40835 11.19321,-6.47879 2.73368,-0.71638 7.86729,-0.78606 10.54456,-0.14312 3.665,0.88014 7.26531,2.67163 10.04326,4.99746 2.25076,1.88444 4.10241,4.36641 5.67272,7.60375 4.47152,9.21847 13.01699,18.22243 19.24779,20.28051 1.73457,0.57294 3.91134,0.32531 5.2269,-0.59461 z m -69.02931,-27.88575 c -0.99663,-0.40219 -1.41533,-1.32002 -1.44609,-3.16995 -0.0158,-0.94989 -0.10509,-2.44144 -0.19844,-3.31457 l -0.16972,-1.5875 -3.39685,-0.13229 c -3.322199,-0.12939 -3.410876,-0.14861 -4.034898,-0.87465 -0.41215,-0.47953 -0.638044,-1.07115 -0.638044,-1.67104 0,-2.16854 1.105012,-2.74598 5.254862,-2.74598 2.39178,0 2.91832,-0.0722 3.0512,-0.41851 0.0883,-0.23019 0.1606,-1.75151 0.1606,-3.38071 0,-3.33605 0.21901,-3.90756 1.6825,-4.39055 1.03476,-0.34151 1.89873,-0.0911 2.68313,0.77759 0.45233,0.50095 0.54837,1.07198 0.66146,3.93296 l 0.13229,3.34693 3.39566,0.13229 3.39567,0.13229 0.77152,0.86407 c 0.85042,0.95243 0.96779,1.82538 0.39449,2.93402 -0.57524,1.11241 -1.44669,1.36129 -4.76648,1.36129 -2.49332,0 -3.02917,0.0709 -3.16255,0.41851 -0.0883,0.23019 -0.1606,1.66485 -0.1606,3.18814 0,3.06875 -0.30397,4.02275 -1.44782,4.54392 -0.79775,0.36348 -1.35973,0.37745 -2.16189,0.0537 z m 50.8,0 c -1.30679,-0.52735 -1.87016,-2.67763 -1.01968,-3.89186 0.53769,-0.76766 1.98108,-1.22589 2.83674,-0.90057 0.86334,0.32825 1.79265,1.5205 1.79265,2.29989 0,1.94448 -1.83241,3.20977 -3.60971,2.49254 z m -8.46667,-8.46667 c -1.30678,-0.52735 -1.87016,-2.67762 -1.01968,-3.89185 0.5377,-0.76767 1.98108,-1.2259 2.83674,-0.90057 0.86335,0.32824 1.79265,1.52049 1.79265,2.29989 0,1.94448 -1.8324,3.20977 -3.60971,2.49253 z m 16.93333,0 c -1.30678,-0.52735 -1.87016,-2.67762 -1.01967,-3.89185 0.53769,-0.76767 1.98107,-1.2259 2.83673,-0.90057 0.86335,0.32824 1.79265,1.52049 1.79265,2.29989 0,1.94448 -1.8324,3.20977 -3.60971,2.49253 z m -8.46666,-8.46666 c -1.30679,-0.52736 -1.87016,-2.67763 -1.01968,-3.89186 0.53769,-0.76767 1.98108,-1.22589 2.83674,-0.90057 0.86334,0.32824 1.79265,1.5205 1.79265,2.29989 0,1.94448 -1.83241,3.20977 -3.60971,2.49254 z"
         id="path314" /></g></g><script
     id="mesh_polyfill"
     type="text/javascript">&#10;!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();&#10;</script></svg>
