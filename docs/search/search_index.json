{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Easy Game Lobby","text":""},{"location":"#overview","title":"Overview","text":"<p>Easy Game Lobby is your solution for streamlining the development of multiplayer game lobbies within Unity. Designed to wrap around Unity's lobby and relay systems, Easy Game Lobby offers an intuitive interface with a higher level of abstraction, making lobby development a breeze. Whether you're a seasoned developer or just starting out, Easy Game Lobby provides the tools you need to jump straight into game development.</p> <p>Be aware that Easy Game Lobby only handles the lobby system, from connecting players together within Relay and starting your game scene. It does not handle the game's networking or gameplay logic.</p> <p>  Getting Started  Download Package </p>"},{"location":"#features","title":"Features","text":"<ul> <li>Fully Functional Lobby Template: Dive straight into development with a fully functional and customizable lobby template, allowing you to skip the setup phase and focus on building your game or optionally use our interfaces to create your own with ease.</li> <li>Streamlined Lobby Management: Effortlessly handle all aspects of lobby management, like creating, joining and disconnecting from lobbies.</li> <li>Player Reconnection Handling: Easily reconnects your players in an eventual network disruption or game crash.</li> <li>Rate Limit Handling: Easy Game Lobby automatically manages rate limits, preventing players from exceeding Unity lobby predefined thresholds.</li> <li>Flexible Authentication: Supports anonymous and Steam login, with the capability for easy expansion to other authentication methods.</li> <li>Relay Connection Automation: Automatically connect players to relays, simplifying network setup and ensuring optimal performance.</li> <li>Host Migration Support: Enable host transitions when hosts leave, automatically connecting the relay with the new host.</li> <li>Error Handling with Custom Messages: Easy Game Lobby automatically handles lobby errors and provides customizable error messages, keeping players informed and engaged.</li> <li>Customizable Lobby Values: Easily add new custom lobby values using the our custom editor window, tailoring lobbies to your specific game requirements.</li> <li>Listen Lobby Updates: Listen for lobby value changes and subscribe to actions, making it simple to implement dynamic lobby functionality.</li> <li>Powerful Lobby Querying: Query lobbies with ease and add new filters based on any lobby value including custom values, giving you fine-grained control over filtering and matchmaking.</li> </ul>"},{"location":"enable-steamworks/","title":"Enabling Steamworks","text":"<ol> <li>Install the Steamworks Package (Installing using the .unitypackage is easier)</li> <li>A new script will be created at <code>Assets/Scripts/Steamworks.NET/SteamManager.cs</code>, move it to <code>Assets\\com.rlabrecque.steamworks.net\\Runtime</code></li> <li>Create a new GameObject in the scene and add the <code>SteamManager</code> script to it</li> <li>Create your app and note down the app ID following the Steamworks documentation.</li> <li>Create the Publisher Web API key following the Authentication using Web API Keys documentation.</li> <li>Configure your ID provider to be Steam for Unity Authentication:<ol> <li>In the Unity Editor menu, go to Edit &gt; Project Settings\u2026, then select Services &gt; Authentication from the navigation menu.</li> <li>Set ID Providers to Steam, then select Add.</li> <li>Enter the app ID in the App ID text field.</li> <li>Enter the Publisher Web API Key in the Key text field, then select Save.</li> </ol> </li> <li>On the Project Settings and go to the <code>Player</code> &gt; <code>Other Settings</code> &gt; <code>Script Compilation</code> and add a new define symbol <code>ENABLE_STEAM</code></li> </ol> <p>Now Steamworks API is enabled and Unity services are configured to use Steam as an authentication provider.</p> <p>Easy Game Lobby, only uses Steam to authenticate and get the Steam profile name, refer to the Steamworks.NET documentation and Steamworks oficial documentation for more information on how to further use the Steamworks API.</p>"},{"location":"getting-started/first-steps/","title":"Getting started","text":"<p>  Download Package </p>"},{"location":"getting-started/first-steps/#importing-the-package","title":"Importing the package","text":"<p>To begin using Easy Game Lobby, import the package into your Unity project.</p> <p>When importing the files, the \"Runtime/Templates\" folder is optional. This folder contains a fully functional lobby template that you can use to jumpstart your game development. If you prefer to create your own lobby UI from scratch, you can skip importing this folder. However, we recommend checking the template to understand the system and utilize some of its scripts for your custom interfaces.</p>"},{"location":"getting-started/first-steps/#enabling-unity-services","title":"Enabling Unity Services","text":"<p>After importing the Easy Game Lobby package into your Unity project, enable the necessary services:</p> <ol> <li>Unity Services</li> <li>Unity Lobby</li> <li>Unity Relay</li> </ol>"},{"location":"getting-started/first-steps/#loading-the-template","title":"Loading the Template","text":"<p>If you imported the \"Runtime/Templates\" folder, locate the template scene at \"Templates/Scenes\". Add the scene to your build settings and open it to see the lobby in action. (You may need to import the TextMesh Pro package to display texts correctly, if not already imported. Reload the scene after importing.)</p> <p>The basics of the lobby should already be functional, allowing you to start testing immediately. However, you may need to adjust certain settings to ensure full compatibility with your project.</p>"},{"location":"getting-started/lobby-settings/","title":"Settings","text":""},{"location":"getting-started/lobby-settings/#lobbymanager-settings","title":"LobbyManager Settings","text":"<ul> <li>Waiting Room Scene: The scene name considered as the waiting room.</li> <li>Disconnected From Relay: Determines if the host should kick players from the lobby upon relay disconnection.</li> <li>Host Disconnects: Determines if the current player should leave the lobby after the relay host disconnects.</li> <li>Game Quit: Determines if the current player should leave the lobby upon game closure (does not apply to iOS).</li> </ul>"},{"location":"getting-started/lobby-settings/#lobby-settings","title":"Lobby Settings","text":"<p>Lobby settings window can be accessed from the <code>Window</code> &gt; <code>GameLobby</code> &gt; <code>Lobby Settings</code> menu.</p> <ul> <li>Default Max Players: The default maximum number of players allowed in a lobby.</li> <li>Heartbeat Interval: Interval in seconds between each lobby heartbeat.</li> </ul> <p>See the official Unity documentation on Config Options for more information.</p>"},{"location":"getting-started/lobby-settings/#exceptions","title":"Exceptions","text":"<p>Exceptions trigger the event <code>OnMsgPopUp</code> with the exception message and type.</p> <ul> <li>Default Exception: Default exception text and type sent when an error without a specific exception occurs.</li> <li>Custom Lobby Exceptions: Custom exceptions displayed for specific errors, any lobby exception can be added. If text is left empty, Unity Lobby default error message will be used; If not added, the default exception will be used.</li> <li>Other Exceptions: Additional exceptions shown for specific errors.</li> </ul>"},{"location":"getting-started/lobby-settings/#custom-lobby-and-player-values","title":"Custom Lobby and Player Values","text":"<p>Access the Custom Lobby Values window from <code>Window</code> &gt; <code>GameLobby</code> &gt; <code>Set Lobby Values</code> menu.</p> <p>Contains lobby and player custom values that can be added, removed, and edited. These values can be accessed/updated on any LocalPlayer or LocalLobby instance.</p> <p></p> <p>Available types:</p> <ul> <li>String</li> <li>Int</li> <li>Float</li> <li>Bool</li> <li>Enum (Refer to Custom Enum for details)</li> </ul> <p>For custom types implementation, refer to Custom Lobby Values Types.</p> <p>Lobby values can be indexed for filtering lobbies using the Query Builder.</p> <p>There's a limit of 20 lobby values and 10 player values. <code>Easy Game Lobby</code> reserves one of each for internal purposes; the player Name value can be removed if not needed.</p> <p>It's recommended to use custom values for data that doesn't change frequently and/or is required for matchmaking purposes (e.g., game mode, map, etc.). For more dynamic data (e.g., player ready status, player team, etc.), consider using Netcode RPCs or Network Variables/Lists.</p> <p>Also take a look at Unity's documentation on Lobby data and player data.</p>"},{"location":"getting-started/template-settings-and-concepts/","title":"Template Settings and Concepts","text":""},{"location":"getting-started/template-settings-and-concepts/#concepts","title":"Concepts","text":"<p>The template scene consists of three essential Game Objects:</p> <ul> <li>UI: The UI Canvas containing all lobby UI elements and scripts.</li> <li>LobbyManager: The main script controlling the lobby.</li> <li>NetworkManager: Contains Unity's NetworkManager script.</li> </ul> <p>The UI system contains:</p> <ul> <li>Panels: Display various lobby states such as login, search, and lobby. Each panel has its own script with customizable settings for its behavior and elements, including buttons to show the panel and set it as the default.</li> <li>Sub-panels: Smaller panels that interact with the main panels, like the Create Lobby panel inside the Search panel. Each sub-panel has its own script with settings for its behavior and elements.</li> <li>Popups: Small windows showing messages to players, like the Loading popup. Each popup has its own script or is controlled by the panel script.</li> <li>Elements: Prefabs, Components, buttons, texts, and input fields controlled by panels and sub-panels. Most are optional, but red-marked elements are mandatory, be sure to check the panel they are attached to, before removing them.</li> </ul> <p></p> <p>You can learn more about inheriting from existing panels or creating your own in the Custom Panels section.</p>"},{"location":"getting-started/template-settings-and-concepts/#ui-settings","title":"UI Settings","text":"<p>The UI Canvas contains three panels that may need adjustments to fit your project's needs:</p>"},{"location":"getting-started/template-settings-and-concepts/#login-panel","title":"Login Panel","text":"<p>By default, the login panel is the first panel that appears when you open the lobby.</p> <p>Settings:</p> <ul> <li>Skip using Steam: Automatically logs in with the Steam account if enabled.</li> <li>Skip using last login name: Automatically logs in with the assigned name if enabled.</li> <li>Hide panel if skipping: Hides the panel if logging in automatically.</li> <li>Auto assign last login name: Assigns the last used name automatically.</li> <li>Assign random name if empty: Assigns a random name if none is assigned.</li> <li>Should Try to Reconnect: Automatically tries to reconnect to the last lobby if enabled.</li> </ul> <p>Enabling \"Skip using Steam\" or \"Skip using last login name\" logs in the player automatically upon scene load, even if the panel is not the default. (That way it's possible to show another panel as default while logging automatically).</p>"},{"location":"getting-started/template-settings-and-concepts/#search-panel","title":"Search Panel","text":"<p>Once the player is logged in, the login panel will automatically change the active panel to the search panel.</p> <p>If the player leaves a lobby, the Panels Manager will automatically change the active panel to the search panel.</p> <p>Settings:</p> <ul> <li>Sample results: Shows a random sample of total results if enabled. (This is useful if you have a large number of lobbies and don't want to show all of them at once.)</li> <li>Should auto refresh: Automatically refreshes the lobbies list if enabled.</li> <li>Auto refresh rate: Time in seconds between each auto refresh.</li> <li>Max lobbies: Maximum number of lobbies to retrieve.</li> </ul> <p>Contains two sub-panels: CreateLobby Panel, JoinByCode Panel, and a Connecting PopUp.</p>"},{"location":"getting-started/template-settings-and-concepts/#lobby-panel","title":"Lobby Panel","text":"<p>Once the player joins a lobby, the Panels Manager will automatically change the active panel to the lobby panel.</p> <p>It contains a script called <code>Game Start Manager</code> with the following settings:</p> <ul> <li>Should everyone be ready: All players must be ready before starting the game if enabled.</li> <li>Should lock lobby: Locks the lobby upon game start, preventing new players from joining if enabled.</li> <li>Min players to start: Minimum number of players required to start the game.</li> <li>Should load scene: Loads the game scene upon game start if enabled, otherwise triggers the <code>OnGameStart</code> event.</li> <li>Game scene name: Name of the scene loaded upon game start.</li> <li>Load scene mode: Mode in which the scene is loaded.</li> </ul>"},{"location":"managing-lobbies/authentication/","title":"Authentication","text":"<p>Easy Game Lobby uses Unity's built-in authentication system to manage users. This system allows you to authenticate users using different methods, we currently support Anonymous and Steam authentication.</p> <p>All authentication methods can be accessed through the LobbyManager <code>NetworkHelper</code> property.</p> <p>Steam authentication methods are only available if Steam is enabled.</p> <p>Refer to Unity's documentation for more information on how to implement other authentication methods.</p>"},{"location":"managing-lobbies/authentication/#methods","title":"Methods","text":""},{"location":"managing-lobbies/authentication/#signinanonymously","title":"<code>SignInAnonymously</code>","text":"<p>Declaration</p> <p>Task SignInAnonymouslyAsync( )</p> <p>Description</p> <p>Sign in anonymously to the Unity Services.</p>"},{"location":"managing-lobbies/authentication/#signinwithsteam","title":"<code>SignInWithSteam</code>","text":"<p>Declaration</p> <p>Task SignInWithSteamAsync( )</p> <p>Description</p> <p>Sign in with Steam to the Unity Services.</p>"},{"location":"managing-lobbies/authentication/#linksteamaccount","title":"<code>LinkSteamAccount</code>","text":"<p>Declaration</p> <p>Task LinkSteamAccountAsync( )</p> <p>Description</p> <p>Link the Steam account to the anonymous account.</p>"},{"location":"managing-lobbies/authentication/#unlinksteamaccount","title":"<code>UnlinkSteamAccount</code>","text":"<p>Declaration</p> <p>void UnlinkSteamAccount( )</p> <p>Description</p> <p>Unlink the Steam account from the anonymous account.</p>"},{"location":"managing-lobbies/lobby-manager/","title":"Lobby Manager","text":"<p>Implemented in: <code>EasyGameLobby</code></p> <p>The Lobby Manager is the main class that you will interact with when working with lobbies, it's a singleton and won't be destroyed on load. It is responsible for managing all lobby functionalities such as creating and keeping the lobby active sending <code>Heartbeats</code> and everything you may need while working with lobbies.</p> <p>Unless you are creating your own lobby UI from scratch or modifying the existing one, you will not need to interact with the Lobby Manager directly. However, it is important to understand its properties and methods.</p>"},{"location":"managing-lobbies/lobby-manager/#properties","title":"Properties","text":""},{"location":"managing-lobbies/lobby-manager/#lobbymanagerinstance","title":"<code>LobbyManager.Instance</code>","text":"<p>Type: LobbyManager</p> <p>The singleton instance of the Lobby Manager. You can access it from any script by calling <code>LobbyManager.Instance</code> and access its properties and methods.</p>"},{"location":"managing-lobbies/lobby-manager/#currentlobby","title":"<code>CurrentLobby</code>","text":"<p>Type: LocalLobby</p> <p>The current lobby the player is in. Instance of the <code>LocalLobby</code> class, which contains all the information about the lobby. If the player is not in a lobby, it will be <code>null</code>.</p>"},{"location":"managing-lobbies/lobby-manager/#currentplayer","title":"<code>CurrentPlayer</code>","text":"<p>Type: LocalPlayer</p> <p>Instance of the <code>LocalPlayer</code> class, which contains all the information about the player. Even if the player is not in a lobby, this property will always be available.</p>"},{"location":"managing-lobbies/lobby-manager/#networkhelper","title":"<code>NetworkHelper</code>","text":"<p>Type: NetworkHelper</p> <p>Instance of the <code>NetworkHelper</code> class, which contains all the methods for authenticating the player.</p>"},{"location":"managing-lobbies/lobby-manager/#methods","title":"Methods","text":""},{"location":"managing-lobbies/lobby-manager/#createlobby","title":"<code>CreateLobby</code>","text":"<p>Declaration</p> <p>Task CreateLobby(bool isPrivate, string lobbyName, string password = null, int maxPlayers = DEFAULT_MAX_PLAYERS)</p> <p>Task CreateLobby(LocalLobby newLobby, string lobbyName, int maxPlayers = DEFAULT_MAX_PLAYERS)</p> <p>Parameters</p> Parameter Type Description isPrivate* bool Determines if the lobby is private. lobbyName* string The name of the lobby. password string The password to join the lobby. maxPlayers int The maximum number of players allowed in the lobby. newLobby* LocalLobby New instance of the LocalLobby class with the lobby settings. <p>* Required parameter.</p> <p>Description</p> <p>Creates a new lobby with the specified settings. If a LocalLobby instance is provided, it will use its settings instead of the parameters. The player will automatically join the lobby after creation and trigger the <code>OnLobbyJoinedOrCreated</code> event.</p>"},{"location":"managing-lobbies/lobby-manager/#joinlobby","title":"<code>JoinLobby</code>","text":"<p>Declaration</p> <p>Task JoinLobbyById(string id, string password = null)</p> <p>Task JoinLobbyByCode(string code, string password = null)</p> <p>Parameters</p> Parameter Type Description id* string The ID of the lobby to join. code* string The code of the lobby to join. password string The password to join the lobby. <p>* Required parameter.</p> <p>Description</p> <p>Joins a lobby by its ID or code. If the lobby is private, the password must be provided. The player will automatically join the lobby and trigger the <code>OnLobbyJoinedOrCreated</code> event.</p>"},{"location":"managing-lobbies/lobby-manager/#quickjoinlobby","title":"<code>QuickJoinLobby</code>","text":"<p>Declaration</p> <p>Task QuickJoinLobby(QueryBuilder queryBuilder)</p> <p>Parameters</p> Parameter Type Description queryBuilder* QueryBuilder The query builder to filter the lobbies to join. <p>* Required parameter.</p> <p>Description</p> <p>Joins a random lobby that matches the query builder filters. The player will automatically join the lobby and trigger the <code>OnLobbyJoinedOrCreated</code> event.</p>"},{"location":"managing-lobbies/lobby-manager/#getlobbies","title":"<code>GetLobbies</code>","text":"<p>Declaration</p> <p>Task&lt;List&lt;LocalLobby&gt;&gt; GetLobbiesAsLocal(QueryBuilder queryBuilder)</p> <p>Task&lt;List&lt;Lobby&gt;&gt; GetLobbies(QueryBuilder queryBuilder)</p> <p>Parameters</p> Parameter Type Description queryBuilder* QueryBuilder The query builder to filter the lobbies to get. <p>* Required parameter.</p> <p>Description</p> <p>Returns a list of lobbies that match the query builder filters. The lobbies can be returned as a list of <code>Lobby</code> or <code>LocalLobby</code> instances.</p>"},{"location":"managing-lobbies/lobby-manager/#trytoreconnectlastjoinedlobby","title":"<code>TryToReconnectLastJoinedLobby</code>","text":"<p>Declaration</p> <p>Task&lt;bool&gt; TryToReconnectLastJoinedLobby( )</p> <p>Description</p> <p>Tries to reconnect to the last lobby the player was in. Returns <code>true</code> if the reconnection was successful, <code>false</code> otherwise.</p> <p>As Easy Game Lobby does not handle the game's networking or gameplay logic, be aware that even though the reconnection was successful, it's up to you to sync the current game state with the reconnected player.</p>"},{"location":"managing-lobbies/lobby-manager/#leavelobby","title":"<code>LeaveLobby</code>","text":"<p>Declaration</p> <p>Task LeaveLobby(string reason = null)</p> <p>Parameters</p> Parameter Type Description reason string The reason for leaving the lobby. <p>Description</p> <p>Leaves the current lobby. If a reason is provided, an <code>OnMsgPopup</code> event will be triggered with the reason with the type <code>Info</code>.</p>"},{"location":"managing-lobbies/lobby-manager/#removeplayer","title":"<code>RemovePlayer</code>","text":"<p>Declaration</p> <p>Task RemovePlayer(string playerId)</p> <p>Parameters</p> Parameter Type Description playerId* string The ID of the player to remove from the lobby. <p>* Required parameter.</p> <p>Description</p> <p>Removes a player from the current lobby. Only the lobby owner can remove players from the lobby.</p>"},{"location":"managing-lobbies/lobby-manager/#events","title":"Events","text":""},{"location":"managing-lobbies/lobby-manager/#onlobbyjoinedorcreated","title":"<code>OnLobbyJoinedOrCreated</code>","text":"<p>Parameters</p> Parameter Type Description joinedLobby LocalLobby The lobby that was joined or created. <p>Description</p> <p>Triggered when the player joins or creates a lobby, providing the LocalLobby instance of the lobby.</p>"},{"location":"managing-lobbies/lobby-manager/#onmsgpopup","title":"<code>OnMsgPopup</code>","text":"<p>Parameters</p> Parameter Type Description text string The message to display. msgType MessageType The type of the message. <p>Description</p> <p>Triggered when a message popup is requested, providing the message text and type.</p> <p>Message types enum:</p> <ul> <li><code>Ignorable</code></li> <li><code>Info</code></li> <li><code>Warning</code></li> <li><code>Error</code></li> <li><code>Critical</code></li> </ul>"},{"location":"managing-lobbies/lobby-manager/#onlobbyleft","title":"<code>OnLobbyLeft</code>","text":"<p>Description</p> <p>Triggered when the player leaves the lobby.</p>"},{"location":"managing-lobbies/lobby-manager/#request-cooldown","title":"Request Cooldown","text":"<p>Every Lobby request has it's rate limits, <code>RequestCooldown</code> is a class that helps managing the rate limit of the requests. All RequestCooldown are static readonly fields that can be accessed from the <code>LobbyManager</code> class.</p> <p>See more about the RequestCooldown class.</p> <p>Available RequestCooldown:</p> <ul> <li><code>QueryCooldown</code></li> <li><code>CreateLobbyCooldown</code></li> <li><code>JoinLobbyCooldown</code></li> <li><code>QuickJoinCooldown</code></li> <li><code>LeaveOrRemovePlayerCooldown</code></li> <li><code>UpdatePlayerCooldown</code></li> <li><code>UpdateLobbyCooldown</code></li> <li><code>GetJoinedLobbiesCooldown</code></li> <li><code>ReconnectCooldown</code></li> <li><code>HeartbeatCooldown</code></li> </ul>"},{"location":"managing-lobbies/local-lobby/","title":"Local Lobby","text":"<p>Implemented in: <code>EasyGameLobby</code></p> <p>Local Lobby wraps around Lobby instances, providing an interface for easy management and listening to lobby values and events. Most data fields utilize either a <code>LobbyActionValue</code> or an <code>ActionValue</code> to facilitate value changes and event listening (Refer to their respective pages for more information). While any player can modify values locally, only the host can send changes to the server using the {{<code>UpdateLobbyData</code>}}{{&lt; mdl-disable \"\" &gt;}} method. Do not modify any data if the current player is not the host.</p> <p>All data of joined lobbies are automatically synchronized with the server, and the host is responsible for updating the lobby data.</p> <p>Any custom lobby value can be easily accessed by its name, as shown in the example below:</p> <pre><code>Debug.Log(LobbyManager.Instance.CurrentLobby.MyCustomValue.Value);\n</code></pre> <p>Or accessed using a string:</p> <pre><code>// Casting is required to access the correct value type, otherwise it will always return the value as a string.\nDebug.Log(\n  (LobbyActionValue&lt;int&gt;)LobbyManager.Instance.CurrentLobby[\"MyCustomValue\"].Value\n);\n// Or\nDebug.Log(\n  (LobbyActionValue&lt;int&gt;)LobbyManager.Instance.CurrentLobby.CustomDataMap[\"MyCustomValue\"].Value\n);\n</code></pre> <p>A new instance of a local lobby can be created and provided to the <code>CreateLobby</code> method to create a lobby with updated values before creation.</p> Local Lobby Constructor<pre><code>// The relay code is always automatically generated, providing it will have no effect.\npublic LocalLobby(bool isPrivate, string password = null, string relayCode = null)\n</code></pre> <pre><code>// Password is optional\nLocalLobby newLobby = new LocalLobby(true, \"password123\");\nnewLobby.MyCustomValue.Value = 10;\nawait LobbyManager.Instance.CreateLobby(newLobby, \"My Lobby\", 4);\n</code></pre>"},{"location":"managing-lobbies/local-lobby/#lobby-data","title":"Lobby Data","text":"<ul> <li><code>Id</code> - string Read-Only</li> <li><code>Code</code> - string Read-Only</li> <li><code>Name</code> - LobbyActionValue&lt;string&gt;</li> <li><code>MaxPlayers</code> - LobbyActionValue&lt;int&gt;</li> <li><code>IsPrivate</code> - LobbyActionValue&lt;bool&gt;</li> <li><code>IsLocked</code> - LobbyActionValue&lt;bool&gt;</li> <li><code>HostId</code> - LobbyActionValue&lt;string&gt;</li> <li> <p><code>Password</code> - LobbyActionValue&lt;string&gt; Only visible to the host.</p> </li> <li> <p><code>HasPassword</code> - ActionValue&lt;bool&gt;</p> </li> <li><code>Players</code> - List&lt;LocalPlayer&gt;</li> <li> <p><code>ClientIdToPlayer</code> - Dictionary&lt;ulong, LocalPlayer&gt; Maps the Netcode client id to the LocalPlayer. Only visible to the host.</p> </li> <li> <p><code>RelayCode</code> - LobbyActionValue&lt;string&gt;</p> </li> <li><code>Any Custom Lobby Value</code> - LobbyActionValue&lt;T&gt;</li> <li><code>CustomDataMap</code> - Dictionary&lt;string, ILobbyValue&gt;</li> </ul> Reading lobby values<pre><code>Debug.Log(LobbyManager.Instance.CurrentLobby.Name.Value);\nDebug.Log(LobbyManager.Instance.CurrentLobby.MyCustomValue.Value);\n</code></pre> Listening to lobby value changes<pre><code>LobbyManager.Instance.CurrentLobby.Name.OnValueChanged += (oldValue, newValue) =&gt;\n{\n  Debug.Log($\"Lobby name changed from {oldValue} to {newValue}\");\n};\n// Or\nvoid OnNameChanged(string oldValue, string newValue)\n{\n  Debug.Log($\"Lobby name changed from {oldValue} to {newValue}\");\n}\n\nLobbyManager.Instance.CurrentLobby.Name.OnValueChanged += OnNameChanged;\n</code></pre> <p>Refer to Action Value for more information.</p>"},{"location":"managing-lobbies/local-lobby/#methods","title":"Methods","text":""},{"location":"managing-lobbies/local-lobby/#updatelobbydata","title":"<code>UpdateLobbyData</code>","text":"<p>Declaration</p> <p>Task UpdateLobbyData( )</p> <p>Description</p> <p>Sends all updated lobby values to the server. Only the host can send changes to the server.</p> <p>Example:</p> <pre><code>LobbyManager.Instance.CurrentLobby.MyCustomValue.Value = 99;\nLobbyManager.Instance.CurrentLobby.Name.Value = \"New Lobby Name\";\nawait LobbyManager.Instance.CurrentLobby.UpdateLobbyData();\n</code></pre>"},{"location":"managing-lobbies/local-lobby/#events","title":"Events","text":""},{"location":"managing-lobbies/local-lobby/#onplayerjoined","title":"<code>OnPlayerJoined</code>","text":"<p>Parameters</p> <ul> <li><code>LocalPlayer</code> - The player that joined the lobby.</li> </ul> <p>Description</p> <p>Event that is called when a player joins the lobby.</p>"},{"location":"managing-lobbies/local-lobby/#onplayerremoved","title":"<code>OnPlayerRemoved</code>","text":"<p>Parameters</p> <ul> <li><code>LocalPlayer</code> - The player that left the lobby.</li> <li><code>int</code> - The index of the player in the player list (Do not use this index to access the player in the player list as it will be unavailable).</li> </ul> <p>Description</p> <p>Event that is called when a player leaves the lobby.</p>"},{"location":"managing-lobbies/local-player/","title":"Local Player","text":"<p>Implemented in: <code>EasyGameLobby</code></p> <p>Wraps around Player instances, providing an interface for easy management and listening to player values and events. Most data fields utilize either a <code>LobbyActionValue</code> or an <code>ActionValue</code> to facilitate value changes and event listening (Refer to their respective pages for more information). While any player can modify values locally, only the player represented by the instance can send changes to the server using the {{<code>UpdatePlayerData</code>}}{{&lt; mdl-disable \"\" &gt;}} method. Do not modify any data if the current player is not the player represented by the instance.</p> <p>Any custom player value can be easily accessed by its name, as shown in the example below:</p> <pre><code>Debug.Log(LobbyManager.Instance.CurrentPlayer.MyCustomPlayerValue.Value);\n</code></pre> <p>Or accessed using a string:</p> <pre><code>// Casting is required to access the correct value type, otherwise it will always return the value as a string.\nDebug.Log(\n  (PlayerActionValue&lt;int&gt;)LobbyManager.Instance.CurrentPlayer[\"MyCustomPlayerValue\"].Value\n);\n// Or\nDebug.Log(\n  (PlayerActionValue&lt;int&gt;)LobbyManager.Instance.CurrentPlayer.CustomDataMap[\"MyCustomPlayerValue\"].Value\n);\n</code></pre>"},{"location":"managing-lobbies/local-player/#player-data","title":"Player Data","text":"<ul> <li><code>Id</code> - string Read-Only</li> <li> <p><code>ClientId</code> - ulong Read-Only Only visible to the host.</p> </li> <li> <p><code>IsHost</code> - LobbyActionValue&lt;bool&gt;</p> </li> <li> <p><code>IsConnected</code> - LobbyActionValue&lt;bool&gt; True if the player is connected to the relay. Only visible to the host.</p> </li> <li> <p><code>Any Custom Player Value</code> - LobbyActionValue&lt;T&gt;</p> </li> <li><code>CustomDataMap</code> - Dictionary&lt;string, ILobbyValue&gt;</li> </ul> Reading player values<pre><code>Debug.Log(LobbyManager.Instance.CurrentPlayer.IsHost.Value);\nDebug.Log(LobbyManager.Instance.CurrentPlayer.MyCustomPlayerValue.Value);\n</code></pre> Listening to player value changes<pre><code>LobbyManager.Instance.CurrentPlayer.IsHost.OnValueChanged += (oldValue, newValue) =&gt;\n{\n  Debug.Log($\"Is host changed from {oldValue} to {newValue}\");\n};\n// Or\nvoid OnIsHostChanged(bool oldValue, bool newValue)\n{\n  Debug.Log($\"Is host changed from {oldValue} to {newValue}\");\n}\n\nLobbyManager.Instance.CurrentPlayer.IsHost.OnValueChanged += OnIsHostChanged;\n</code></pre> <p>Refer to Action Value for more information.</p>"},{"location":"managing-lobbies/local-player/#methods","title":"Methods","text":""},{"location":"managing-lobbies/local-player/#updateplayerdata","title":"<code>UpdatePlayerData</code>","text":"<p>Declaration</p> <p>Task UpdatePlayerData( )</p> <p>Description</p> <p>Updates the player data on the server. Only the player represented by the instance can send changes to the server.</p>"},{"location":"managing-lobbies/filtering-lobbies/apply-query-and-sort/","title":"Apply filters and Sorting to the Query Builder","text":"<p>The <code>QueryBuilder</code> class contains two types of filterable properties: <code>QueryField</code> and <code>QueryAndSortField</code>. Sorting can only be applied to <code>QueryAndSortField</code> fields, while filters can be applied to both types.</p>"},{"location":"managing-lobbies/filtering-lobbies/apply-query-and-sort/#filtering-methods","title":"Filtering Methods","text":"<p>Every filter method returns the <code>QueryBuilder</code> instance, allowing you to chain multiple filters together.</p>"},{"location":"managing-lobbies/filtering-lobbies/apply-query-and-sort/#clear","title":"<code>Clear</code>","text":"<p>Declaration</p> <p>QueryBuilder Clear( )</p> <p>Description</p> <p>Clears the value of the field.</p>"},{"location":"managing-lobbies/filtering-lobbies/apply-query-and-sort/#setop","title":"<code>SetOp</code>","text":"<p>Declaration</p> <p>QueryBuilder SetOp(QueryFilter.OpOptions op, string value)</p> <p>Description</p> <p>Sets the value to be filtered and the operation to use. Use the <code>QueryFilter.OpOptions</code> enum to specify the operation.</p>"},{"location":"managing-lobbies/filtering-lobbies/apply-query-and-sort/#equals","title":"<code>Equals</code>","text":"<p>Declaration</p> <p>QueryBuilder Equals(string value)</p> <p>Description</p> <p>Sets the value to be filtered and the operation to use as Equals.</p>"},{"location":"managing-lobbies/filtering-lobbies/apply-query-and-sort/#notequals","title":"<code>NotEquals</code>","text":"<p>Declaration</p> <p>QueryBuilder NotEquals(string value)</p> <p>Description</p> <p>Sets the value to be filtered and the operation to use as NotEquals.</p>"},{"location":"managing-lobbies/filtering-lobbies/apply-query-and-sort/#contains","title":"<code>Contains</code>","text":"<p>Declaration</p> <p>QueryBuilder Contains(string value)</p> <p>Description</p> <p>Sets the value to be filtered and the operation to use as Contains.</p>"},{"location":"managing-lobbies/filtering-lobbies/apply-query-and-sort/#greaterthan","title":"<code>GreaterThan</code>","text":"<p>Declaration</p> <p>QueryBuilder GreaterThan(string value)</p> <p>Description</p> <p>Sets the value to be filtered and the operation to use as GreaterThan.</p>"},{"location":"managing-lobbies/filtering-lobbies/apply-query-and-sort/#lessthan","title":"<code>LessThan</code>","text":"<p>Declaration</p> <p>QueryBuilder LessThan(string value)</p> <p>Description</p> <p>Sets the value to be filtered and the operation to use as LessThan.</p>"},{"location":"managing-lobbies/filtering-lobbies/apply-query-and-sort/#greaterthanorequals","title":"<code>GreaterThanOrEquals</code>","text":"<p>Declaration</p> <p>QueryBuilder GreaterThanOrEquals(string value)</p> <p>Description</p> <p>Sets the value to be filtered and the operation to use as GreaterThanOrEquals.</p>"},{"location":"managing-lobbies/filtering-lobbies/apply-query-and-sort/#lessthanorequals","title":"<code>LessThanOrEquals</code>","text":"<p>Declaration</p> <p>QueryBuilder LessThanOrEquals(string value)</p> <p>Description</p> <p>Sets the value to be filtered and the operation to use as LessThanOrEquals.</p>"},{"location":"managing-lobbies/filtering-lobbies/apply-query-and-sort/#sorting-methods","title":"Sorting Methods","text":""},{"location":"managing-lobbies/filtering-lobbies/apply-query-and-sort/#setisascending","title":"<code>SetIsAscending</code>","text":"<p>Declaration</p> <p>QueryBuilder SetIsAscending(bool value)</p> <p>Description</p> <p>Sets the order of the field. Use <code>true</code> for ascending and <code>false</code> for descending.</p>"},{"location":"managing-lobbies/filtering-lobbies/apply-query-and-sort/#ascending","title":"<code>Ascending</code>","text":"<p>Declaration</p> <p>QueryBuilder Ascending( )</p> <p>Description</p> <p>Sets the order of the field to Ascending.</p>"},{"location":"managing-lobbies/filtering-lobbies/apply-query-and-sort/#descending","title":"<code>Descending</code>","text":"<p>Declaration</p> <p>QueryBuilder Descending( )</p> <p>Description</p> <p>Sets the order of the field to Descending.</p>"},{"location":"managing-lobbies/filtering-lobbies/query-builder/","title":"Query Builder","text":"<p>Implemented in: <code>EasyGameLobby.Infrastructure</code></p> <p>Query Builder allows you to easily filter lobbies based on any lobby value including custom values. The query builder can be used to filter lobbies on the <code>GetLobbies</code> and <code>GetLobbiesAsLocal</code> methods, as well as used to quickly join a lobby with the <code>QuickJoinLobby</code> method.</p> <p>Every Query Builder method returns itself, allowing you to chain multiple filters together.</p> <p>To enable a Lobby Custom Value to be filtered, an index must be defined in the Custom Lobby Values window.</p>"},{"location":"managing-lobbies/filtering-lobbies/query-builder/#properties","title":"Properties","text":"<ul> <li><code>SampleResults</code> - bool If true, results will be randomly sampled and no continuation token will be returned.</li> <li><code>Count</code> - int The number of results to return (Min: 1, Max: 100).</li> <li><code>Skip</code> - int The number of results to skip.</li> <li><code>ContinuationToken</code> - string The continuation token to use for pagination, automatically setted after first GetLobbies call. It's used to get the next page after calling the NextPage method and calling GetLobbies.</li> </ul>"},{"location":"managing-lobbies/filtering-lobbies/query-builder/#filterable-properties","title":"Filterable Properties","text":"<p>Those properties are used to filter and order the lobbies results and can be accessed either by the property name or by their FieldOptions (Unity's Lobby Enum, in case of custom values, use the index of the custom value).</p> <pre><code>QueryBuilder queryBuilder = new QueryBuilder();\n\nqueryBuilder\n  .Name.Contains(\"My Lobby\")\n  [QueryFilter.FieldOptions.N2].LessThan(\"10\") // Custom Value of index number 2\n  [QueryFilter.FieldOptions.AvailableSlots].GreaterThan(\"0\")\n  .MyCustomValue.GreaterThan(\"5\");\n\nList&lt;LocalLobby&gt; results = await LobbyManager.Instance.GetLobbiesAsLocal(queryBuilder);\n</code></pre> <ul> <li><code>MaxPlayers</code> - QueryAndSortField</li> <li><code>Name</code> - QueryAndSortField</li> <li><code>Created</code> - QueryAndSortField</li> <li><code>LastUpdated</code> - QueryAndSortField</li> <li><code>AvailableSlots</code> - QueryAndSortField</li> <li><code>IsLocked</code> - QueryField</li> <li><code>HasPassword</code> - QueryField</li> <li><code>Any Indexed Custom Value</code> - QueryAndSortField</li> </ul>"},{"location":"managing-lobbies/filtering-lobbies/query-builder/#methods","title":"Methods","text":"<p>Every method return the QueryBuilder instance, allowing you to chain all methods together.</p> <ul> <li>QueryBuilder Reset( ) Reset the query builder to its default values.</li> <li>QueryBuilder FirstPage( ) Set the ContinuationToken to null in order to get the first page of results.</li> <li>QueryBuilder NextPage( ) Set the ContinuationToken to the next available token (only available after the first GetLobbies call using this instance of query builder).</li> </ul> <pre><code>QueryBuilder queryBuilder = new QueryBuilder();\n\nqueryBuilder\n  .HasPassword.Equals(\"false\")\n  .SetCount(10);\n\n// Returns the first 10 lobbies\nList&lt;LocalLobby&gt; firstResults = await LobbyManager.Instance.GetLobbiesAsLocal(queryBuilder);\n\nqueryBuilder.NextPage();\n\n// Returns the next 10 lobbies\nList&lt;LocalLobby&gt; nextResults = await LobbyManager.Instance.GetLobbiesAsLocal(queryBuilder);\n</code></pre> <p>Properties setters:</p> <p>Useful to set properties and continue chaining methods.</p> <ul> <li>QueryBuilder SetSampleResults(bool value)</li> <li>QueryBuilder SetCount(int value)</li> <li>QueryBuilder SetSkip(int value)</li> <li>QueryBuilder SetContinuationToken(string value)</li> </ul>"},{"location":"others/action-value/","title":"Action Value and Lobby Action Value","text":""},{"location":"others/action-value/#action-value","title":"Action Value","text":"<p>The <code>ActionValue</code> class is a generic class that allows you to create a value that can be updated and listened to.</p>"},{"location":"others/action-value/#properties","title":"Properties","text":""},{"location":"others/action-value/#value","title":"<code>Value</code>","text":"<p>Type: <code>T</code></p>"},{"location":"others/action-value/#onchanged","title":"<code>OnChanged</code>","text":"<p>Type: <code>event&lt;T value, T oldValue&gt;</code></p> <p>Event only triggered when the value is updated, sending the new and old value.</p>"},{"location":"others/action-value/#methods","title":"Methods","text":""},{"location":"others/action-value/#setvaluewithoutnotify","title":"<code>SetValueWithoutNotify</code>","text":"<p>Declaration</p> <p>void SetValueWithoutNotify(T value)</p> <p>Parameters</p> Parameter Type Description value* T The new value to be set. <p>* Required parameter.</p> <p>Description</p> <p>Sets the <code>Value</code> of the action value without triggering the <code>OnChanged</code> event.</p>"},{"location":"others/action-value/#lobby-action-value","title":"Lobby Action Value","text":"<p>The <code>LobbyActionValue</code> class is a generic class that implements the <code>ActionValue</code> class and the <code>ILobbyValue</code> interface. It has the same properties and methods as the <code>ActionValue</code> class, but it also enables the <code>LocalPlayer</code> and <code>LocalLobby</code> classes to use it as a custom value, detecting changes and sending them to the server.</p>"},{"location":"others/custom-enums/","title":"Custom Enum","text":"<p>To use an enum as a lobby custom value, you either need to create a new script file inside the <code>Assets/Easy Game Lobby/Runtime</code> folder or:</p> <ol> <li>Create a new folder</li> <li>Add a new Assembly Definition Reference.<ol> <li>Right-click on the new folder and select <code>Create &gt; Assembly Definition Reference</code>.</li> <li>On the <code>Assembly Definition Reference</code> inspector, add the <code>com.oblige.easygamelobby</code> assembly definition.</li> </ol> </li> <li>Create a new script file inside the folder.</li> </ol> <p>After creating the file you can define the enum as you would normally do in Unity, then you have to add the <code>[CustomEnum]</code> attribute to the enum class.</p> <pre><code>using EasyGameLobby.Infrastructure;\n\n[CustomEnum]\npublic enum MyCustomEnum\n{\n    Value1,\n    Value2,\n    Value3\n}\n</code></pre> <p>Now you can open the <code>Lobby Custom Values</code> window and add a new custom value with the type <code>Enum</code> and under its settings, you will see the enum you just created.</p> <p></p>"},{"location":"others/custom-value-types/","title":"Custom Value Types","text":"<p>if you want to use your own type as a custom value in the lobby, you can create a class that implements the <code>ILobbyValue</code> interface.</p>"},{"location":"others/custom-value-types/#ilobbyvalue-interface","title":"ILobbyValue Interface","text":""},{"location":"others/custom-value-types/#properties","title":"Properties","text":""},{"location":"others/custom-value-types/#key","title":"<code>Key</code>","text":"<p>Type: <code>string</code></p> <p>The key of the value. It must be unique within all other custom values in the lobby or player.</p>"},{"location":"others/custom-value-types/#value","title":"<code>Value</code>","text":"<p>Type: <code>string</code></p> <p>The value of the custom value. It must be serializable into a string. To use a more complex type, you can serialize it into a string using JSON or any other serialization method.</p>"},{"location":"others/custom-value-types/#isoutdated","title":"<code>IsOutdated</code>","text":"<p>Type: <code>bool</code></p> <p>Determines if the value is outdated and needs to be updated. It needs to be set to <code>true</code> when the value is changed in order to be sent to the server.</p>"},{"location":"others/custom-value-types/#visibility","title":"<code>Visibility</code>","text":"<p>Type: <code>VisibilityOptions</code></p> <p>Determines the visibility of the value. Refer to the Data access and visibility for more information.</p>"},{"location":"others/custom-value-types/#methods","title":"Methods","text":""},{"location":"others/custom-value-types/#setupdatedvalue","title":"<code>SetUpdatedValue</code>","text":"<p>Declaration</p> <p>SetUpdatedValue(string value)</p> <p>Parameters</p> Parameter Type Description value string The new value to be set. <p>Description</p> <p>Sets the <code>Value</code> of the custom value and marks the outdated property as <code>false</code>.</p>"},{"location":"others/custom-value-types/#usage","title":"Usage","text":"<p>In order to use your newly created custom value, the file must be placed either in the <code>Assets/Easy Game Lobby/Runtime</code> folder or in a new folder with a Assembly Definition Reference that references the <code>com.oblige.easygamelobby</code> assembly.</p>"},{"location":"others/custom-value-types/#creating-the-assembly-definition-reference","title":"Creating the Assembly Definition Reference","text":"<ol> <li>Create a new folder</li> <li>Add a new Assembly Definition Reference.<ol> <li>Right-click on the new folder and select <code>Create &gt; Assembly Definition Reference</code>.</li> <li>On the <code>Assembly Definition Reference</code> inspector, add the <code>com.oblige.easygamelobby</code> assembly definition.</li> </ol> </li> </ol>"},{"location":"others/custom-value-types/#adding-the-custom-value-to-the-lobby-or-player","title":"Adding the Custom Value to the Lobby or Player","text":"<p>Locate either the <code>LocalPlayerCustomValues</code> or <code>LocalLobbyCustomValues</code> files in the <code>Assets/Easy Game Lobby/Runtime</code> folder and add a new custom value to the dictionary.</p> <pre><code>public class LocalPlayerCustomValues\n  {\n    public readonly Dictionary&lt;string, ILobbyValue&gt; CustomDataMap = new();\n    public ILobbyValue[] CustomDataArr =&gt; CustomDataMap.Values.ToArray();\n\n    // Auto-generated code for custom values, do not modify manually the code inside this region or changes will be lost.\n    #region Custom Data Properties\n    public readonly LobbyActionValue&lt;string&gt; Name = new(\"Name\", VisibilityOptions.Member);\n    #endregion\n\n    public readonly MyCustomValueClass MyCustomValue = new(); // Your custom value\n\n    public LocalPlayerCustomValues()\n    {\n      // Auto-generated code for custom values, do not modify manually the code inside this region or changes will be lost.\n      #region Custom Data Additions\n      CustomDataMap.Add(Name.Key, Name);\n      #endregion\n\n      CustomDataMap.Add(MyCustomValue.Key, MyCustomValue); // Your custom value\n    }\n  }\n</code></pre>"},{"location":"others/request-cooldown/","title":"Request Cooldown class","text":"<p>This class is used to manage every type of lobby request and its rate limits. It provides a way to queue requests and execute them when the rate limit allows it. Also provides events to notify when a type of request is Over the rate limit and when it is available to be executed.</p>"},{"location":"others/request-cooldown/#properties","title":"Properties","text":""},{"location":"others/request-cooldown/#isavailable","title":"<code>IsAvailable</code>","text":"<p>Type: ActionValue&lt;bool&gt;</p> <p>A boolean ActionValue that indicates if the request is available to be executed. Is set to <code>false</code> as soon as the request rate limit is reached.</p>"},{"location":"others/request-cooldown/#onoverrequestlimit","title":"<code>OnOverRequestLimit</code>","text":"<p>Type: Action <p>An event that is triggered when the request is called again while it's not available. It provides a boolean parameter that is true when the request is over the rate limit and false when it is available to be executed.</p> <p>Example</p> <p>If the request limit is 4 requests per minute, and the request is called 5 times in a minute, on the 4th call the <code>IsAvailable</code> property will be set to <code>false</code> and in the 5th call the <code>OnOverRequestLimit</code> event will be triggered with the parameter <code>true</code>. After a minute, the <code>IsAvailable</code> property will be set to <code>true</code> and the <code>OnOverRequestLimit</code> event will be triggered with the parameter <code>false</code>.</p>"},{"location":"others/request-cooldown/#methods","title":"Methods","text":""},{"location":"others/request-cooldown/#waitforrequestcooldown","title":"<code>WaitForRequestCooldown()</code>","text":"<p>Declaration</p> <p>Task WaitForRequestCooldown( )</p> <p>Description</p> <p>Awaitable method that waits until the request is available to be executed. Always call this method before executing a request to ensure that the request is not over the rate limit.</p>"},{"location":"ui-scripts/custom-panels/","title":"Custom Panels","text":"<p>The template panels system handles what is displayed to the player in the UI. To extend this system, you can create custom panels by creating a script that extends the <code>BasePanel</code> or <code>SubPanelBase</code> class.</p>"},{"location":"ui-scripts/custom-panels/#basepanel","title":"BasePanel","text":"<p>The <code>BasePanel</code> class is the base class for all custom panels. It provides a custom inspector that allows you to easily see the panel in the editor and set the panel as the default panel.</p> <p>It automatically listens for the <code>ActivePanelId.OnChanged</code> event of the PanelsManager and will automatically show or hide the panel based on the active panel id.</p> <p>By default, it associates the <code>gameObject.GetInstanceId()</code> as the panel id. You can override the <code>BasePanel</code> methods to customize the panel id.</p>"},{"location":"ui-scripts/custom-panels/#subpanelbase","title":"SubPanelBase","text":"<p>It's a basic class that extends <code>MonoBehaviour</code> and provides a reference to the MainPanel it belongs to.</p>"},{"location":"ui-scripts/custom-panels/#panelsmanager","title":"PanelsManager","text":"<p>It's a simple class that listen to the LobbyManager events <code>OnLobbyJoinedOrCreated</code> and <code>OnLobbyLeft</code> events, showing the LobbyPanel when the player joins a lobby and showing the SearchPanel when the player leaves the lobby.</p> <p>The script is located inside the root <code>UI</code> game object and can be deleted if you want to handle the panels change yourself.</p> <p>Has a static field <code>ActivePanelId</code> that can be used to change the active panel id.</p> <p>Type: ActionValue&lt;int&gt;</p>"},{"location":"ui-scripts/components-and-prefabs/game-start-manager/","title":"Game Start Manager","text":"<p>The Game Start Manager is singleton component that manages all players ready status and starts the game when the conditions are met.</p> <p>It's located in the Lobby Panel GameObject.</p>"},{"location":"ui-scripts/components-and-prefabs/game-start-manager/#inspector-options","title":"Inspector Options","text":"<ul> <li>Should Everyone Be Ready: If true, all players must be ready to start the game.</li> <li>Should Lock Lobby: If true, the lobby will be locked when the game starts, preventing new players from joining.</li> <li>Min Players To Start: The minimum number of players required to start the game.</li> <li>Game Scene Name: The name of the scene to load, if left empty the event <code>OnGameStart</code> will be triggered.</li> </ul> <p>Note that if the lobby is not locked, players can still join the lobby after the game has started and it's up to you to sync the game state with the new player.</p>"},{"location":"ui-scripts/components-and-prefabs/game-start-manager/#properties","title":"Properties","text":"<ul> <li>Instance: The singleton instance of the Game Start Manager.</li> <li>ReadyPlayers: A network list of players IDs that are ready to start the game.</li> </ul>"},{"location":"ui-scripts/components-and-prefabs/game-start-manager/#events","title":"Events","text":"<ul> <li>OnGameStart: Triggered when the game starts. Only triggered if the <code>Game Scene Name</code> is empty.</li> <li>OnNetworkSpawned: Triggered when the player is connected in the network. (Triggered by the <code>NetworkBehaviour</code> inherited class).</li> </ul>"},{"location":"ui-scripts/components-and-prefabs/lobby-info/","title":"Lobby Info Prefab","text":"<p>The Lobby Info prefab is a UI component that displays information about the lobby. It is used in the Search Panel to show the lobby's name, number of players, and if it has a password.</p> <p>Join the lobby when the user clicks the join button (by default it's the game object it self).</p>"},{"location":"ui-scripts/components-and-prefabs/password-popup/","title":"Password Popup","text":"<p>It's a component that displays a popup to the user to input a password, used to join a private lobby.</p> <p>Joins the given lobby ID when the user clicks the join button, or closes the popup when the user clicks the close button.</p>"},{"location":"ui-scripts/components-and-prefabs/password-popup/#methods","title":"Methods","text":""},{"location":"ui-scripts/components-and-prefabs/password-popup/#openpopup","title":"<code>OpenPopup</code>","text":"<p>Declaration</p> <p>void OpenPopup(string lobbyId)</p> <p>Parameters</p> Parameter Type Description lobbyId* string The ID of the lobby to join. <p>* Required parameter.</p> <p>Description</p> <p>Enables the popup game object and sets the lobby ID to join.</p>"},{"location":"ui-scripts/components-and-prefabs/player-info/","title":"Player Info Prefab","text":"<p>The Player Info prefab is a UI component that displays information about a player. It is used in the Lobby Panel to show the player's name, and status.</p> <p>Listen to <code>ReadyPlayers</code> list changes to show if the player is ready or not.</p> <p>Listen to <code>OnNetworkSpawned</code> event to show the connection status of the player.</p>"},{"location":"ui-scripts/utility-components/msg-popup/","title":"Msg Popup Component","text":"<p>The <code>msg-popup</code> component is a utility component that can be used to display a message to the user. It listens to the <code>OnMsgPopup</code> event and shows the message to the user.</p>"},{"location":"ui-scripts/utility-components/msg-popup/#inspector-options","title":"Inspector Options","text":"<p>Message Type To Listen: A flags Enum with the types of messages that this component should show. You can select multiple types.</p>"},{"location":"ui-scripts/utility-components/request-listener-behaviour/","title":"Request Listener Behaviour","text":"<p>It's a base class that provides a way to listen to when a <code>RequestCooldown</code> is over the rate limit and when it's available again.</p>"},{"location":"ui-scripts/utility-components/request-listener-behaviour/#inspector-options","title":"Inspector Options","text":"<ul> <li>OnOverRequestLimit: Flags Enum with the types of requests that this component should listen to when it's over the rate limit.</li> <li>OnIsAvailable: Flags Enum with the types of requests that this component should listen to when it's available again.</li> </ul>"},{"location":"ui-scripts/utility-components/request-listener-behaviour/#abstract-methods","title":"Abstract Methods","text":"<ul> <li> <p>HandleOverRequestLimit(bool isOverRequestLimit) Method called when the request is over the rate limit.</p> </li> <li> <p>HandleIsAvailableChanged(bool isAvailable, bool wasAvailable) Method called when the request is available again after being over the rate limit.</p> </li> </ul>"},{"location":"ui-scripts/utility-components/request-listener-behaviour/#request-selectable","title":"Request Selectable","text":"<p>The <code>RequestSelectable</code> is a utility component that implements the <code>RequestListenerBehaviour</code> class, useful to disable/enable a selectable component when the request is over the rate limit or available again. In the template it's used to disable the buttons when the request is over the rate limit and enable them when it's available again.</p>"},{"location":"ui-scripts/utility-components/request-listener-behaviour/#request-canvas-group","title":"Request Canvas Group","text":"<p>The <code>RequestCanvasGroup</code> is a utility component that implements the <code>RequestListenerBehaviour</code> class, useful to show/hide a canvas group when the request is over the rate limit or available again. In the template it's used to show a loading panel when the request is over the rate limit and hide it when it's available again.</p>"},{"location":"ui-scripts/utility-components/request-listener-behaviour/#inspector-options_1","title":"Inspector Options","text":"<ul> <li>Visible When Over Request Limit: If true, the canvas group will be visible when the request is over the rate limit and hidden when it's available again.</li> <li>Visible When Available: If true, the canvas group will be visible when the request is available again and hidden when it's over the rate limit.</li> </ul>"}]}